name: Node.js CI with Parallelism

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  detect-changes:
    name: Detect Changes in `test_file.txt`
    runs-on: ubuntu-latest
    outputs:
      file-changed: ${{ steps.detect-changes.outputs.file-changed }}
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Ensure the full Git history is available

    - name: Check for Changes in `test_file.txt`
      id: detect-changes
      run: |
        git fetch origin ${{ github.base_ref }}
        if git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep -q 'test_file.txt'; then
          echo "DEBUG: Changes detected in test_file.txt"
          echo "::set-output name=file-changed::true"
        else
          echo "DEBUG: Changes not detected in test_file.txt"
          echo "::set-output name=file-changed::false"
        fi

  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.file-changed == 'true'
    outputs:
      node-version: ${{ steps.nvm.outputs.NVMRC }}
    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      id: nvm
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

  npm-ci:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: setup
    if: needs.detect-changes.outputs.file-changed == 'true'
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: "${{ needs.setup.outputs.node-version }}"

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - run: npm -i

  npm-test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: npm-ci
    if: needs.detect-changes.outputs.file-changed == 'true'
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: "${{ needs.setup.outputs.node-version }}"

    - name: Add node_modules/.bin to PATH
      run: echo "${{ github.workspace }}/node_modules/.bin" >> $GITHUB_PATH

    - run: npm test

  nestjs-test:
    name: Test NestJS
    runs-on: ubuntu-latest
    needs: npm-ci
    if: needs.detect-changes.outputs.file-changed == 'true'
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: "${{ needs.setup.outputs.node-version }}"

    - name: Add node_modules/.bin to PATH
      run: echo "${{ github.workspace }}/node_modules/.bin" >> $GITHUB_PATH

    - run: npm run test:nestjs

  mocha-test:
    name: Test Mocha
    runs-on: ubuntu-latest
    needs: npm-ci
    if: needs.detect-changes.outputs.file-changed == 'true'
    steps:
    - uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: "${{ needs.setup.outputs.node-version }}"

    - name: Add node_modules/.bin to PATH
      run: echo "${{ github.workspace }}/node_modules/.bin" >> $GITHUB_PATH

    - run: npm run test:mocha
